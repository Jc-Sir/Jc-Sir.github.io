(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{659:function(t,a,s){"use strict";s.r(a);var n=s(25),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"深入执行上下文、词法环境、变量环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深入执行上下文、词法环境、变量环境"}},[t._v("#")]),t._v(" 深入执行上下文、词法环境、变量环境")]),t._v(" "),s("h2",{attrs:{id:"执行上下文的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的概念"}},[t._v("#")]),t._v(" 执行上下文的概念")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("什么是执行上下文")]),t._v(" "),s("p",[t._v("javascript 代码解析和执行时所在的环境")])]),t._v(" "),s("h2",{attrs:{id:"执行上下文的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的类型"}},[t._v("#")]),t._v(" 执行上下文的类型")]),t._v(" "),s("h3",{attrs:{id:"全局执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局执行上下文"}},[t._v("#")]),t._v(" 全局执行上下文")]),t._v(" "),s("ul",[s("li",[t._v("浏览器环境中全局对象是"),s("code",[t._v("window")]),t._v(", 在node环境中全局对象是"),s("code",[t._v("global")])]),t._v(" "),s("li",[t._v("js代码开始运行后。首先进入全局执行上下文环境中，"),s("strong",[t._v("不在任何函数中的js代码都会在全局执行上下文中")])]),t._v(" "),s("li",[s("strong",[t._v("一个js程序中只存在一个全局执行上下文")]),t._v("。创建时会压人栈底，只有当程序结束时才会弹出")]),t._v(" "),s("li",[t._v("全局执行上下文会做两件事。1.创建全局对象，2.将this指向这个全局对象")])]),t._v(" "),s("h3",{attrs:{id:"函数执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数执行上下文"}},[t._v("#")]),t._v(" 函数执行上下文")]),t._v(" "),s("ul",[s("li",[t._v("函数每次调用都会产生一个新的函数执行上下文，每个函数都拥有自己的执行上下文，但是只有调用的时候才会被创建")]),t._v(" "),s("li",[t._v("函数执行上下文的生命周期分为两个阶段。创建和执行")]),t._v(" "),s("li",[t._v("每一个执行上下文中都有以下三个属性\n"),s("ul",[s("li",[t._v("作用域链 scope chain")]),t._v(" "),s("li",[t._v("VO变量对象  // variableObject -> 初始化变量、函数、形参等")]),t._v(" "),s("li",[t._v("this")])])])]),t._v(" "),s("h3",{attrs:{id:"eval执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval执行上下文"}},[t._v("#")]),t._v(" Eval执行上下文")]),t._v(" "),s("p",[t._v("eval函数执行时产生的执行上下文。")]),t._v(" "),s("h2",{attrs:{id:"执行上下文栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文栈"}},[t._v("#")]),t._v(" 执行上下文栈")]),t._v(" "),s("ul",[s("li",[t._v("首先创建全局执行上下文， 压入栈底")]),t._v(" "),s("li",[t._v("每当调用一个函数时，创建函数的函数执行上下文。并且压入栈顶")]),t._v(" "),s("li",[t._v("当函数执行完成后，会从执行上下文栈中弹出，js引擎继续执栈顶的函数。")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'func1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'func2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n*\t\t                 fun2\n*\t          fun1      fun1\t   fun1\t\n* global => global => global => global => global\n*/")]),t._v("\n")])])]),s("h2",{attrs:{id:"执行上下文生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文生命周期"}},[t._v("#")]),t._v(" 执行上下文生命周期")]),t._v(" "),s("h3",{attrs:{id:"变量对象vo和活动对象ao"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量对象vo和活动对象ao"}},[t._v("#")]),t._v(" 变量对象VO和活动对象AO")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("变量对象VO")]),t._v(" "),s("p",[t._v("VO 对应的是函数创建阶段，JS 解析引擎进行预解析时，所有的变量和函数的声明，统称为 Variable Object。该变量与执行上下文相关，知道自己的数据存储在哪里，并且知道如何访问。VO 是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容:")]),t._v(" "),s("ul",[s("li",[t._v("变量 (var, 变量声明)")]),t._v(" "),s("li",[t._v("函数声明")]),t._v(" "),s("li",[t._v("函数的形参")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sum,say,a,b 组合的对象就是VO，不过该对象的值基本上都是undefined")]),t._v("\n")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("活动对象(AO)")]),t._v(" "),s("p",[t._v("AO 对应的是函数执行阶段，当函数被调用执行时，会建立一个执行上下文，该执行上下文包含了函数所需的所有变量，该变量共同组成了一个新的对象就是 Activetion Object。该对象包含了：")]),t._v(" "),s("ul",[s("li",[t._v("函数的所有局部变量")]),t._v(" "),s("li",[t._v("函数的所有命名参数")]),t._v(" "),s("li",[t._v("函数的参数集合")]),t._v(" "),s("li",[t._v("函数的 this 指向")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  JS对象来表示AO")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  AO = {")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        this : window,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        arguments : [4,5],")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        a : 4,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        b : 5,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        say : ,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        sum : undefined")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  }")]),t._v("\n")])])])]),t._v(" "),s("h3",{attrs:{id:"创建阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建阶段"}},[t._v("#")]),t._v(" 创建阶段")]),t._v(" "),s("ul",[s("li",[t._v("创建作用域链")]),t._v(" "),s("li",[t._v("通过变量对象VO创建活动AO\n"),s("ul",[s("li",[t._v("首先创建arguments对象")]),t._v(" "),s("li",[t._v("创建形参实参的键值对")]),t._v(" "),s("li",[t._v("创建函数声明")]),t._v(" "),s("li",[t._v("创建变量声明")])])])]),t._v(" "),s("h3",{attrs:{id:"执行阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段"}},[t._v("#")]),t._v(" 执行阶段")]),t._v(" "),s("ul",[s("li",[t._v("变量赋值。函数引用，执行其他代码逻辑")]),t._v(" "),s("li",[t._v("当执行完毕后。执行上下文出栈，等待垃圾回收机制回收")])]),t._v(" "),s("h3",{attrs:{id:"函数申明提前"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数申明提前"}},[t._v("#")]),t._v(" 函数申明提前")]),t._v(" "),s("p",[t._v("从AO对象的创建过程我们就可以发现，AO对象是先扫描函数体内的函数声明才去扫描变量声明。所以这也就是为啥会有声明提前。")]),t._v(" "),s("h3",{attrs:{id:"变量提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量提升"}},[t._v("#")]),t._v(" 变量提升")]),t._v(" "),s("p",[t._v("AO对象创建时已经将函数内部的变量提前扫描声明。是指在函数执行的过程中开始依次赋值。")]),t._v(" "),s("h2",{attrs:{id:"词法环境和变量环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法环境和变量环境"}},[t._v("#")]),t._v(" 词法环境和变量环境")]),t._v(" "),s("h3",{attrs:{id:"词法环境-lexicalenvironment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法环境-lexicalenvironment"}},[t._v("#")]),t._v(" 词法环境(LexicalEnvironment)")]),t._v(" "),s("h3",{attrs:{id:"变量环境-variableenvironment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量环境-variableenvironment"}},[t._v("#")]),t._v(" 变量环境（VariableEnvironment）")]),t._v(" "),s("h3",{attrs:{id:"代码执行阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码执行阶段"}},[t._v("#")]),t._v(" 代码执行阶段")])])}),[],!1,null,null,null);a.default=e.exports}}]);