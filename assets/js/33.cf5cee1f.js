(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{558:function(t,e,v){t.exports=v.p+"assets/img/vuelifeCircle.53eabf09.png"},728:function(t,e,v){"use strict";v.r(e);var _=v(25),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"vue-生命周期的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue-生命周期的理解"}},[t._v("#")]),t._v(" Vue 生命周期的理解")]),t._v(" "),_("h2",{attrs:{id:"什么是生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是生命周期"}},[t._v("#")]),t._v(" 什么是生命周期")]),t._v(" "),_("p",[t._v("Vue 实例有一个完整的生命周期，也就是从"),_("code",[t._v("开始创建")]),t._v("、"),_("code",[t._v("初始化数据")]),t._v("、"),_("code",[t._v("编译模版")]),t._v("、"),_("code",[t._v("挂载Dom")]),t._v(" -> "),_("code",[t._v("渲染、更新")]),t._v(" -> "),_("code",[t._v("渲染、卸载")]),t._v("等一系列过程，我们称这是 Vue 的生命周期。")]),t._v(" "),_("h2",{attrs:{id:"各个生命周期的作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#各个生命周期的作用"}},[t._v("#")]),t._v(" 各个生命周期的作用")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("生命周期")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("beforeCreate")]),t._v(" "),_("td",[t._v("组件实例被创建之初，组件的属性生效之前,new Vue()之后触发的第一个钩子，在当前阶段 data、methods、computed 以及 watch 上的数据和方法都不能被访问")])]),t._v(" "),_("tr",[_("td",[t._v("created")]),t._v(" "),_("td",[t._v("在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发 updated 函数。可以做一些初始数据的获取，在当前阶段无法与 Dom 进行交互，如果非要想，可以通过 vm.$nextTick 来访问 Dom。")])]),t._v(" "),_("tr",[_("td",[t._v("beforeMount")]),t._v(" "),_("td",[t._v("发生在挂载之前，在这之前 template 模板已导入渲染函数编译。而当前阶段虚拟 Dom 已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发 updated。")])]),t._v(" "),_("tr",[_("td",[t._v("mounted")]),t._v(" "),_("td",[t._v("在挂载完成后发生，在当前阶段，真实的 Dom 挂载完毕，数据完成双向绑定，可以访问到 Dom 节点，使用$refs 属性对 Dom 进行操作。")])]),t._v(" "),_("tr",[_("td",[t._v("beforeUpdate")]),t._v(" "),_("td",[t._v("发生在更新之前，也就是响应式数据发生更新，虚拟 dom 重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染。")])]),t._v(" "),_("tr",[_("td",[t._v("updated")]),t._v(" "),_("td",[t._v("发生在更新完成之后，当前阶段组件 Dom 已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。")])]),t._v(" "),_("tr",[_("td",[t._v("activited")]),t._v(" "),_("td",[t._v("keep-alive 专属，组件被激活时调用")])]),t._v(" "),_("tr",[_("td",[t._v("deadctivated")]),t._v(" "),_("td",[t._v("keep-alive 专属，组件被销毁时调用")])]),t._v(" "),_("tr",[_("td",[t._v("beforeDestory")]),t._v(" "),_("td",[t._v("发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器")])]),t._v(" "),_("tr",[_("td",[t._v("destoryed")]),t._v(" "),_("td",[t._v("发生在实例销毁之后，这个时候只剩下了 dom 空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁")])])])]),t._v(" "),_("h2",{attrs:{id:"生命周期示意图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#生命周期示意图"}},[t._v("#")]),t._v(" 生命周期示意图")]),t._v(" "),_("p",[_("img",{attrs:{src:v(558),alt:"生命周期示意图"}})]),t._v(" "),_("h2",{attrs:{id:"哪个生命周期中发起异步请求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#哪个生命周期中发起异步请求"}},[t._v("#")]),t._v(" 哪个生命周期中发起异步请求？")]),t._v(" "),_("p",[t._v("可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：")]),t._v(" "),_("ul",[_("li",[t._v("能更快获取到服务端数据，减少页面 loading 时间；")]),t._v(" "),_("li",[t._v("ssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；")])]),t._v(" "),_("h2",{attrs:{id:"嵌套组件的声明周期执行顺序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#嵌套组件的声明周期执行顺序"}},[t._v("#")]),t._v(" 嵌套组件的声明周期执行顺序")]),t._v(" "),_("h3",{attrs:{id:"创建挂载阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建挂载阶段"}},[t._v("#")]),t._v(" 创建挂载阶段")]),t._v(" "),_("ul",[_("li",[t._v("父组件的 beforeCreate")]),t._v(" "),_("li",[t._v("父组件的 Created")]),t._v(" "),_("li",[t._v("父组件的 beforeMount")]),t._v(" "),_("li",[t._v("子组件的 beforeCreate")]),t._v(" "),_("li",[t._v("子组件的 created")]),t._v(" "),_("li",[t._v("子组件的 beforeMount")]),t._v(" "),_("li",[t._v("子组件的 mounted")]),t._v(" "),_("li",[t._v("父组件的 mounted")])]),t._v(" "),_("h3",{attrs:{id:"更新阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#更新阶段"}},[t._v("#")]),t._v(" 更新阶段")]),t._v(" "),_("ul",[_("li",[t._v("父组件的 beforeUpdate")]),t._v(" "),_("li",[t._v("子组件的 beforeUpdate")]),t._v(" "),_("li",[t._v("子组件的 updated")]),t._v(" "),_("li",[t._v("父组件的 updated")])]),t._v(" "),_("h3",{attrs:{id:"销毁阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#销毁阶段"}},[t._v("#")]),t._v(" 销毁阶段")]),t._v(" "),_("ul",[_("li",[t._v("父组件的 beforeDestroy")]),t._v(" "),_("li",[t._v("子组件的 beforeDestroy")]),t._v(" "),_("li",[t._v("子组件的 destroyed")]),t._v(" "),_("li",[t._v("父组件的 destroyed")])]),t._v(" "),_("h2",{attrs:{id:"异步子组件的创建挂载阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#异步子组件的创建挂载阶段"}},[t._v("#")]),t._v(" 异步子组件的创建挂载阶段")]),t._v(" "),_("p",[t._v("子组件的创建挂载阶段发生在父组件的beforeUpdate和updated之间。")]),t._v(" "),_("ul",[_("li",[t._v("父组件的 beforeCreate")]),t._v(" "),_("li",[t._v("父组件的 Created")]),t._v(" "),_("li",[t._v("父组件的 beforeMount")]),t._v(" "),_("li",[t._v("父组件的 mounted")]),t._v(" "),_("li",[t._v("父组件的 beforeUpdate")]),t._v(" "),_("li",[t._v("子组件的 beforeCreate")]),t._v(" "),_("li",[t._v("子组件的 created")]),t._v(" "),_("li",[t._v("子组件的 beforeMount")]),t._v(" "),_("li",[t._v("子组件的 mounted")]),t._v(" "),_("li",[t._v("父组件的 updated")])])])}),[],!1,null,null,null);e.default=a.exports}}]);